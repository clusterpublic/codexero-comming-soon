import { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import { toast } from 'react-toastify';
import { createContract, isWalletConnected, getAccountAddress } from '../utils/signerAdapter.js';
import './ReferralGenerator.css';

// Contract ABI for referral functions
const REFERRAL_ABI = [
  "function referrals(address) view returns (tuple(address referrer, uint256 totalEarnings, uint256 referralCount, bool isActive))",
  "function getReferralCode(address user) view returns (string)",
  "function createReferralCode() external",
  "function getReferralStats(address user) view returns (tuple(uint256 totalEarnings, uint256 referralCount, bool isActive))"
];

export default function ReferralGenerator({ contractAddress }) {
  const [referralCode, setReferralCode] = useState('');
  const [referralStats, setReferralStats] = useState({
    totalEarnings: '0',
    referralCount: '0',
    isActive: false
  });
  const [isLoading, setIsLoading] = useState(false);
  const [walletConnected, setWalletConnected] = useState(false);
  const [accountAddress, setAccountAddress] = useState('');

  useEffect(() => {
    checkWalletConnection();
  }, []);

  const checkWalletConnection = async () => {
    try {
      const connected = await isWalletConnected();
      setWalletConnected(connected);
      
      if (connected) {
        const address = await getAccountAddress();
        setAccountAddress(address);
        loadReferralData();
      }
    } catch (error) {
      console.error('Error checking wallet connection:', error);
      setWalletConnected(false);
    }
  };

  const loadReferralData = async () => {
    try {
      // Validate account address before proceeding
      if (!accountAddress || accountAddress === '') {
        console.log('ReferralGenerator: Cannot load referral data - account address is empty');
        return;
      }
      
      setIsLoading(true);
      console.log('ReferralGenerator: Loading referral data with contract address:', contractAddress);
      console.log('ReferralGenerator: Account address:', accountAddress);
      
      const contract = createContract(contractAddress, REFERRAL_ABI);
      console.log('ReferralGenerator: Contract created successfully:', contract);
      
      // Get referral data using the correct function
      console.log('ReferralGenerator: Calling getReferralData with address:', accountAddress);
      const referralData = await contract.getReferralData(accountAddress);
      console.log('ReferralGenerator: getReferralData result:', referralData);
      
      // Check if user has referral data
      if (referralData.referrer !== ethers.constants.AddressZero) {
        // User is a referrer
        setReferralCode(`REF_${accountAddress.slice(2, 8).toUpperCase()}`); // Generate a simple referral code
        setReferralStats({
          totalEarnings: ethers.utils.formatEther(referralData.totalEarnings),
          referralCount: referralData.referralCount.toString(),
          isActive: referralData.isActive
        });
      } else {
        // User is not a referrer yet
        setReferralCode('');
        setReferralStats({
          totalEarnings: '0',
          referralCount: '0',
          isActive: false
        });
      }
    } catch (error) {
      console.error('Error loading referral data:', error);
      console.error('Error details:', {
        message: error.message,
        code: error.code,
        argument: error.argument,
        value: error.value
      });
      toast.error('Failed to load referral data');
    } finally {
      setIsLoading(false);
    }
  };

  const createReferralCode = async () => {
    if (!walletConnected) {
      toast.error('Please connect your wallet first');
      return;
    }

    try {
      setIsLoading(true);
      const contract = createContract(contractAddress, REFERRAL_ABI);
      
      const tx = await contract.createReferralCode();
      toast.info('Creating referral code... Please wait for confirmation');
      
      const receipt = await tx.wait();
      toast.success('âœ… Referral code created successfully!');
      
      // Reload referral data
      await loadReferralData();
    } catch (error) {
      console.error('Error creating referral code:', error);
      toast.error(`Error creating referral code: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const copyReferralLink = () => {
    if (!referralCode) {
      toast.error('No referral code available');
      return;
    }

    const referralLink = `${window.location.origin}?ref=${referralCode}`;
    navigator.clipboard.writeText(referralLink);
    toast.success('Referral link copied to clipboard!');
  };

  const shareReferralLink = async () => {
    if (!referralCode) {
      toast.error('No referral code available');
      return;
    }

    const referralLink = `${window.location.origin}?ref=${referralCode}`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Join CodeXero NFT Collection',
          text: 'Use my referral link to get special access to the CodeXero NFT collection!',
          url: referralLink
        });
      } catch (error) {
        console.error('Error sharing:', error);
        // Fallback to copying
        copyReferralLink();
      }
    } else {
      // Fallback to copying
      copyReferralLink();
    }
  };

  const connectWallet = async () => {
    try {
      if (typeof window !== 'undefined' && window.ethereum) {
        await window.ethereum.request({ method: 'eth_requestAccounts' });
        await checkWalletConnection();
      } else {
        toast.error('Please install MetaMask or another Web3 wallet');
      }
    } catch (error) {
      console.error('Error connecting wallet:', error);
      toast.error('Failed to connect wallet');
    }
  };

  if (!walletConnected) {
    return (
      <div className="text-center py-8">
        <div className="text-6xl mb-4">ðŸ”—</div>
        <h3 className="text-xl font-semibold text-white mb-2">Wallet Not Connected</h3>
        <p className="text-gray-300 mb-4">
          Please connect your wallet to manage referrals
        </p>
        <button
          onClick={connectWallet}
          className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-lg transition-colors"
        >
          Connect Wallet
        </button>
      </div>
    );
  }

  return (
    <div className="referral-generator">
      <div className="referral-header">
        <h2 className="text-2xl font-bold text-white mb-4">Referral System</h2>
        <p className="text-gray-300 mb-6">
          Connected: {accountAddress ? `${accountAddress.slice(0, 6)}...${accountAddress.slice(-4)}` : 'Unknown'}
        </p>
      </div>

      <div className="referral-content">
        {/* Referral Code Section */}
        <div className="referral-code-section">
          <h3 className="text-lg font-semibold text-white mb-3">Your Referral Code</h3>
          
          {referralCode ? (
            <div className="referral-code-display">
              <div className="code-box">
                <span className="code-text">{referralCode}</span>
                <button
                  onClick={copyReferralLink}
                  className="copy-button"
                  title="Copy referral link"
                >
                  ðŸ“‹
                </button>
              </div>
              <div className="code-actions">
                <button
                  onClick={copyReferralLink}
                  className="action-button secondary"
                >
                  Copy Link
                </button>
                <button
                  onClick={shareReferralLink}
                  className="action-button primary"
                >
                  Share
                </button>
              </div>
            </div>
          ) : (
            <div className="no-code-section">
              <p className="text-gray-400 mb-4">
                You don't have a referral code yet. Create one to start earning!
              </p>
              <button
                onClick={createReferralCode}
                disabled={isLoading}
                className="create-code-button"
              >
                {isLoading ? 'Creating...' : 'Create Referral Code'}
              </button>
            </div>
          )}
        </div>

        {/* Referral Stats Section */}
        <div className="referral-stats-section">
          <h3 className="text-lg font-semibold text-white mb-3">Referral Statistics</h3>
          
          <div className="stats-grid">
            <div className="stat-card">
              <div className="stat-icon">ðŸ’°</div>
              <div className="stat-content">
                <div className="stat-label">Total Earnings</div>
                <div className="stat-value">{referralStats.totalEarnings} ETH</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">ðŸ‘¥</div>
              <div className="stat-content">
                <div className="stat-label">Referral Count</div>
                <div className="stat-value">{referralStats.referralCount}</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">âœ…</div>
              <div className="stat-content">
                <div className="stat-label">Status</div>
                <div className={`stat-value ${referralStats.isActive ? 'text-green-400' : 'text-red-400'}`}>
                  {referralStats.isActive ? 'Active' : 'Inactive'}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* How It Works Section */}
        <div className="how-it-works-section">
          <h3 className="text-lg font-semibold text-white mb-3">How Referrals Work</h3>
          
          <div className="steps-list">
            <div className="step-item">
              <div className="step-number">1</div>
              <div className="step-content">
                <h4 className="step-title">Create Your Code</h4>
                <p className="step-description">
                  Generate a unique referral code that others can use
                </p>
              </div>
            </div>
            
            <div className="step-item">
              <div className="step-number">2</div>
              <div className="step-content">
                <h4 className="step-title">Share Your Link</h4>
                <p className="step-description">
                  Share your referral link with friends and community
                </p>
              </div>
            </div>
            
            <div className="step-item">
              <div className="step-number">3</div>
              <div className="step-content">
                <h4 className="step-title">Earn Rewards</h4>
                <p className="step-description">
                  Get rewards when people use your referral code to mint NFTs
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
